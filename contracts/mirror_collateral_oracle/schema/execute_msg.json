{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "anchor_oracle": {
              "type": [
                "string",
                "null"
              ]
            },
            "band_oracle": {
              "type": [
                "string",
                "null"
              ]
            },
            "base_denom": {
              "type": [
                "string",
                "null"
              ]
            },
            "mint_contract": {
              "type": [
                "string",
                "null"
              ]
            },
            "mirror_oracle": {
              "type": [
                "string",
                "null"
              ]
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "register_collateral_asset"
      ],
      "properties": {
        "register_collateral_asset": {
          "type": "object",
          "required": [
            "asset",
            "multiplier",
            "price_source"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "multiplier": {
              "$ref": "#/definitions/Decimal"
            },
            "price_source": {
              "$ref": "#/definitions/SourceType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "revoke_collateral_asset"
      ],
      "properties": {
        "revoke_collateral_asset": {
          "type": "object",
          "required": [
            "asset"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_collateral_price_source"
      ],
      "properties": {
        "update_collateral_price_source": {
          "type": "object",
          "required": [
            "asset",
            "price_source"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "price_source": {
              "$ref": "#/definitions/SourceType"
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_collateral_multiplier"
      ],
      "properties": {
        "update_collateral_multiplier": {
          "type": "object",
          "required": [
            "asset",
            "multiplier"
          ],
          "properties": {
            "asset": {
              "$ref": "#/definitions/AssetInfo"
            },
            "multiplier": {
              "$ref": "#/definitions/Decimal"
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "AssetInfo": {
      "description": "AssetInfo contract_addr is usually passed from the cw20 hook so we can trust the contract_addr is properly validated.",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/Addr"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "SourceType": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "mirror_oracle"
          ],
          "properties": {
            "mirror_oracle": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "anchor_oracle"
          ],
          "properties": {
            "anchor_oracle": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "band_oracle"
          ],
          "properties": {
            "band_oracle": {
              "type": "object"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "fixed_price"
          ],
          "properties": {
            "fixed_price": {
              "type": "object",
              "required": [
                "price"
              ],
              "properties": {
                "price": {
                  "$ref": "#/definitions/Decimal"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "terraswap"
          ],
          "properties": {
            "terraswap": {
              "type": "object",
              "required": [
                "terraswap_pair_addr"
              ],
              "properties": {
                "intermediate_denom": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "terraswap_pair_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "anchor_market"
          ],
          "properties": {
            "anchor_market": {
              "type": "object",
              "required": [
                "anchor_market_addr"
              ],
              "properties": {
                "anchor_market_addr": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "native"
          ],
          "properties": {
            "native": {
              "type": "object",
              "required": [
                "native_denom"
              ],
              "properties": {
                "native_denom": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    }
  }
}
