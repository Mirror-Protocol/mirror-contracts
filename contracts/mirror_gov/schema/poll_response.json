{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PollResponse",
  "type": "object",
  "required": [
    "abstain_votes",
    "creator",
    "deposit_amount",
    "description",
    "end_time",
    "id",
    "no_votes",
    "status",
    "title",
    "voters_reward",
    "yes_votes"
  ],
  "properties": {
    "abstain_votes": {
      "$ref": "#/definitions/Uint128"
    },
    "creator": {
      "type": "string"
    },
    "deposit_amount": {
      "$ref": "#/definitions/Uint128"
    },
    "description": {
      "type": "string"
    },
    "end_time": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "execute_data": {
      "anyOf": [
        {
          "$ref": "#/definitions/PollExecuteMsg"
        },
        {
          "type": "null"
        }
      ]
    },
    "id": {
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "link": {
      "type": [
        "string",
        "null"
      ]
    },
    "no_votes": {
      "$ref": "#/definitions/Uint128"
    },
    "staked_amount": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "status": {
      "$ref": "#/definitions/PollStatus"
    },
    "title": {
      "type": "string"
    },
    "total_balance_at_end_poll": {
      "anyOf": [
        {
          "$ref": "#/definitions/Uint128"
        },
        {
          "type": "null"
        }
      ]
    },
    "voters_reward": {
      "$ref": "#/definitions/Uint128"
    },
    "yes_votes": {
      "$ref": "#/definitions/Uint128"
    }
  },
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "PollExecuteMsg": {
      "type": "object",
      "required": [
        "contract",
        "msg"
      ],
      "properties": {
        "contract": {
          "type": "string"
        },
        "msg": {
          "$ref": "#/definitions/Binary"
        }
      }
    },
    "PollStatus": {
      "type": "string",
      "enum": [
        "in_progress",
        "passed",
        "rejected",
        "executed",
        "expired"
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
