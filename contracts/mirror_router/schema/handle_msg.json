{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "HandleMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "receive"
      ],
      "properties": {
        "receive": {
          "$ref": "#/definitions/Cw20ReceiveMsg"
        }
      }
    },
    {
      "description": "Execute following messages 1. swap half tokens 2. provide liquidity 3. stake lp token",
      "type": "object",
      "required": [
        "buy_and_stake"
      ],
      "properties": {
        "buy_and_stake": {
          "type": "object",
          "required": [
            "asset_token"
          ],
          "properties": {
            "asset_token": {
              "$ref": "#/definitions/HumanAddr"
            },
            "belief_price": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      }
    },
    {
      "description": "1. mint tokens 2. provide liquidity 3. stake lp token",
      "type": "object",
      "required": [
        "mint_and_stake"
      ],
      "properties": {
        "mint_and_stake": {
          "type": "object",
          "required": [
            "asset_token",
            "collateral_ratio"
          ],
          "properties": {
            "asset_token": {
              "$ref": "#/definitions/HumanAddr"
            },
            "collateral_ratio": {
              "$ref": "#/definitions/Decimal"
            }
          }
        }
      }
    },
    {
      "description": "Execute multiple BuyOperation",
      "type": "object",
      "required": [
        "buy_with_routes"
      ],
      "properties": {
        "buy_with_routes": {
          "type": "object",
          "required": [
            "offer_asset_info",
            "routes"
          ],
          "properties": {
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_asset_info": {
              "$ref": "#/definitions/AssetInfo"
            },
            "routes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetInfo"
              }
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "buy_operation"
      ],
      "properties": {
        "buy_operation": {
          "type": "object",
          "required": [
            "ask_asset_info",
            "offer_asset_info"
          ],
          "properties": {
            "ask_asset_info": {
              "$ref": "#/definitions/AssetInfo"
            },
            "max_spread": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offer_asset_info": {
              "$ref": "#/definitions/AssetInfo"
            },
            "to": {
              "anyOf": [
                {
                  "$ref": "#/definitions/HumanAddr"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "provide_operation"
      ],
      "properties": {
        "provide_operation": {
          "type": "object",
          "required": [
            "asset_token",
            "pair_contract"
          ],
          "properties": {
            "asset_token": {
              "$ref": "#/definitions/HumanAddr"
            },
            "pair_contract": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    },
    {
      "type": "object",
      "required": [
        "stake_operation"
      ],
      "properties": {
        "stake_operation": {
          "type": "object",
          "required": [
            "asset_token",
            "liquidity_token",
            "staker"
          ],
          "properties": {
            "asset_token": {
              "$ref": "#/definitions/HumanAddr"
            },
            "liquidity_token": {
              "$ref": "#/definitions/HumanAddr"
            },
            "staker": {
              "$ref": "#/definitions/HumanAddr"
            }
          }
        }
      }
    }
  ],
  "definitions": {
    "AssetInfo": {
      "anyOf": [
        {
          "type": "object",
          "required": [
            "token"
          ],
          "properties": {
            "token": {
              "type": "object",
              "required": [
                "contract_addr"
              ],
              "properties": {
                "contract_addr": {
                  "$ref": "#/definitions/HumanAddr"
                }
              }
            }
          }
        },
        {
          "type": "object",
          "required": [
            "native_token"
          ],
          "properties": {
            "native_token": {
              "type": "object",
              "required": [
                "denom"
              ],
              "properties": {
                "denom": {
                  "type": "string"
                }
              }
            }
          }
        }
      ]
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
      "type": "string"
    },
    "Cw20ReceiveMsg": {
      "description": "Cw20ReceiveMsg should be de/serialized under `Receive()` variant in a HandleMsg",
      "type": "object",
      "required": [
        "amount",
        "sender"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "sender": {
          "$ref": "#/definitions/HumanAddr"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0 The greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "HumanAddr": {
      "type": "string"
    },
    "Uint128": {
      "type": "string"
    }
  }
}
